doctype html
html
  head
    link(rel='stylesheet', href='/public/css/base.css')
    script(type='text/javascript', src='http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js')
    script(src='/socket.io/socket.io.js')
    script(type='text/javascript', src='/public/js/purl.js')
    script(type='text/javascript', src='/public/js/settings.js')
    title Settings for a new simulation
  body
    #title Settings for a new simulation
    hr
    .break
    form(name='newgroup')
      fieldset.floating
        legend General settings
        p
          label.left-side-label(for='gid') Simulation name
          input#gid(type='text')
        p
          label.left-side-label(for='numfishers') Total fishers per ocean
          input#numfishers(type='number', min='0', step='1', max='13', value='4')
        p
          label.left-side-label(for='numhumans') Human fishers per ocean
          input#numhumans(type='number', min='0', step='1', max='13', value='1')
        p
          label.left-side-label(for='numoceans') Oceans
          input#numoceans(type='number', min='0', step='1', value='1')
        p
          label.left-side-label(for='seasons') Fishing seasons
          input#seasons(type='number', min='0', step='1', value='4')
        p
          label.left-side-label(for='seasonduration') Season length in seconds
          input#seasonduration(type='number', min='0', step='1', value='60')
        p
          label.left-side-label(for='initialdelay') Initial delay seconds
          input#initialdelay(type='number', min='0', step='1', value='10')
        p
          label.left-side-label(for='seasondelay') Season delay seconds
          input#seasondelay(type='number', min='0', step='1', value='10')
        p
          label.left-side-label(for='pauseenabled') Allow client to pause?
          input#pauseenabled-yes(type='radio', name='pauseenabled', value='y', checked='')
          label.radio-button-label(for='pauseenabled-yes') Yes
          br
          label.left-side-label.hidden  Allow client to pause?
          input#pauseenabled-no(type='radio', name='pauseenabled', value='n')
          label.radio-button-label(for='pauseenabled-no') No
        p
          label.left-side-label(for='earlyendenabled') Allow early season end?
          input#earlyendenabled-yes(type='radio', name='earlyendenabled', value='y', checked='')
          label.radio-button-label(for='earlyendenabled-yes') Yes
          br
          label.left-side-label.hidden  Allow early season end?
          input#earlyendenabled-no(type='radio', name='earlyendenabled', value='n')
          label.radio-button-label(for='earlyendenabled-no') No
          br
          em
            | Note: allowing an early season end causes the program to end the current
            | season if (a) all fishers have left to sea and returned to port at least once, and
            | (b) there has been no further activity for three seconds.
      fieldset.floating
        legend Economics
        p
          label.left-side-label(for='fishvalue') Fish value
          input#fishvalue(type='number', min='0.00', step='1.00', value='3.00')
        p
          label.left-side-label(for='costcast') Cost to cast
          input#costcast(type='number', min='0.00', step='1.00', value='0.00')
        p
          label.left-side-label(for='costdeparture') Cost per departure
          input#costdeparture(type='number', min='0.00', step='1.00', value='0.00')
        p
          label.left-side-label(for='costsecond') Cost per second at sea
          input#costsecond(type='number', min='0.00', step='1.00', value='0.00')
        p
          label.left-side-label(for='currencysymbol') Currency symbol
          input#currencysymbol(type='text', value='$')
      fieldset.floating
        legend Fish stocks and fishing
        p
          label.left-side-label(for='realfish') Certain fish
          input#realfish(type='number', min='0', step='1', value='40')
        p
          label.left-side-label(for='maxfish') Maximum fish
          input#maxfish(type='number', min='0', step='1', value='40')
        p
          label.left-side-label(for='startingmysteryfish') Available mystery fish
          input#startingmysteryfish(type='number', min='0', step='1', value='0')
        p
          label.left-side-label(for='mysteryfish') Potential mystery fish
          input#mysteryfish(type='number', min='0', step='1', value='0')
        p
          label.left-side-label(for='spawnfactor') Spawn factor
          input#spawnfactor(type='number', min='0', step='0.10', value='2.00')
        p
          label.left-side-label(for='chancecatch') Chance of catch
          input#chancecatch(type='number', min='0', step='0.01', value='1.00')
      .break
      hr
      .break
      fieldset.floating
        legend Information display
        p
          label.left-side-label(for='showallfishers') Show all fishers?
          input#showallfishers-yes(type='radio', name='showallfishers', value='y', checked='')
          label.radio-button-label(for='showallfishers-yes') Yes
          br
          label.left-side-label.hidden  Show all fishers?
          input#showallfishers-no(type='radio', name='showallfishers', value='n')
          label.radio-button-label(for='showallfishers-no') No
        p
          label.left-side-label(for='shownames') Show their names?
          input#shownames-yes(type='radio', name='shownames', value='y', checked='')
          label.radio-button-label(for='shownames-yes') Yes
          br
          label.left-side-label.hidden  Show their names?
          input#shownames-no(type='radio', name='shownames', value='n')
          label.radio-button-label(for='shownames-no') No
        p
          label.left-side-label(for='showstatus') Show their status?
          input#showstatus-yes(type='radio', name='showstatus', value='y', checked='')
          label.radio-button-label(for='showstatus-yes') Yes
          br
          label.left-side-label.hidden  Show their status?
          input#showstatus-no(type='radio', name='showstatus', value='n')
          label.radio-button-label(for='showstatus-no') No
        p
          label.left-side-label(for='shownumcaught') Show their number of fish caught?
          input#shownumcaught-yes(type='radio', name='shownumcaught', value='y', checked='')
          label.radio-button-label(for='shownumcaught-yes') Yes
          br
          label.left-side-label.hidden  Show their number of fish caught?
          input#shownumcaught-no(type='radio', name='shownumcaught', value='n')
          label.radio-button-label(for='shownumcaught-no') No
        p
          label.left-side-label(for='showbalance') Show their balance?
          input#showbalance-yes(type='radio', name='showbalance', value='y', checked='')
          label.radio-button-label(for='showbalance-yes') Yes
          br
          label.left-side-label.hidden  Show their balance?
          input#showbalance-no(type='radio', name='showbalance', value='n')
          label.radio-button-label(for='showbalance-no') No
      fieldset.floating
        legend Bot information
        p
          label.left-side-label(for='globalgreed') Greediness should...
          input#globalgreed-vary.greedtoggler(type='radio', name='globalgreed', value='vary', checked='')
          label.radio-button-label(for='globalgreed-vary') vary between bots
          br
          label.left-side-label.hidden(for='globalgreed') Greediness should...
          input#globalgreed-constant.greedtoggler(type='radio', name='globalgreed', value='constant')
          label.radio-button-label(for='globalgreed-constant') be consistent at
          br
          label.left-side-label.hidden Constant greed level
          input#globalconstantgreed.greedtoggler(type='number', min='0', step='0.01', max='1', name='globalconstantgreed', value='0.50', disabled='disabled')
        p
          label.left-side-label(for='greeduniformity') Greediness should...
          input#greeduniformity-uniform(type='radio', name='greeduniformity', value='uniform', checked='')
          label.radio-button-label(for='greeduniformity-uniform') remain stable
          br
          label.left-side-label.hidden(for='greeduniformity') Greediness should...
          input#greeduniformity-increasing(type='radio', name='greeduniformity', value='increasing')
          label.radio-button-label(for='greeduniformity-increasng') progressively increase
          br
          label.left-side-label.hidden(for='greeduniformity') Greediness should...
          input#greeduniformity-decreasing(type='radio', name='greeduniformity', value='decreasing')
          label.radio-button-label(for='greeduniformity-decreasing') progressively decrease
        p
          label.left-side-label(for='erratic') Should bots be erratic?
          input#erratic-yes(type='radio', name='erratic', value='y', checked='')
          label.radio-button-label(for='erratic-yes') Yes
          br
          label.left-side-label.hidden  Should bots be erratic?
          input#erratic-no(type='radio', name='erratic', value='n')
          label.radio-button-label(for='erratic-no') No
          br
          em
            | Note: erratic bots hesitate and cast for fish at different rates.
            | This causes them to behave non-optimally.
        p
          label.left-side-label(for='hesitation') Hesitation factor
          input#hesitation(type='number', min='0.01', step='0.01', value='0.40')
        p
          label.left-side-label(for='castspersecond') Maximum casts per second
          input#castspersecond(type='number', min='1', step='1', value='3')
        p
          label.left-side-label(for='castingprobability') Casting probability factor
          input#castingprobability(type='number', min='0.01', step='0.01', value='0.80')
      fieldset.floating
        legend Individual bot details
        label.left-side-label
          b Bot
        label
          b Name and greed
        div
          .bot-data
            label.left-side-label(for='agent1name') Bot 1
            input#agent1name.bot-name(type='text', value='Kermit')
            input#agent1greed.agentgreed.greed-box(type='number', min='0', step='0.01', max='1', value='0.50')
          .bot-data
            label.left-side-label(for='agent2name') Bot 2
            input#agent2name.bot-name(type='text', value='Gonzo')
            input#agent2greed.agentgreed.greed-box(type='number', min='0', step='0.01', max='1', value='0.50')
          .bot-data
            label.left-side-label(for='agent3name') Bot 3
            input#agent3name.bot-name(type='text', value='Piggy')
            input#agent3greed.agentgreed.greed-box(type='number', min='0', step='0.01', max='1', value='0.50')
          .bot-data
            label.left-side-label(for='agent4name') Bot 4
            input#agent4name.bot-name(type='text', value='Fozzie')
            input#agent4greed.agentgreed.greed-box(type='number', min='0', step='0.01', max='1', value='0.50')
          .bot-data
            label.left-side-label(for='agent5name') Bot 5
            input#agent5name.bot-name(type='text', value='Beaker')
            input#agent5greed.agentgreed.greed-box(type='number', min='0', step='0.01', max='1', value='0.50')
          .bot-data
            label.left-side-label(for='agent6name') Bot 6
            input#agent6name.bot-name(type='text', value='Chef')
            input#agent6greed.agentgreed.greed-box(type='number', min='0', step='0.01', max='1', value='0.50')
          .bot-data
            label.left-side-label(for='agent7name') Bot 7
            input#agent7name.bot-name(type='text', value='Rowlf')
            input#agent7greed.agentgreed.greed-box(type='number', min='0', step='0.01', max='1', value='0.50')
          .bot-data
            label.left-side-label(for='agent8name') Bot 8
            input#agent8name.bot-name(type='text', value='Camilla')
            input#agent8greed.agentgreed.greed-box(type='number', min='0', step='0.01', max='1', value='0.50')
          .bot-data
            label.left-side-label(for='agent9name') Bot 9
            input#agent9name.bot-name(type='text', value='Animal')
            input#agent9greed.agentgreed.greed-box(type='number', min='0', step='0.01', max='1', value='0.50')
          .bot-data
            label.left-side-label(for='agent10name') Bot 10
            input#agent10name.bot-name(type='text', value='Beauregard')
            input#agent10greed.agentgreed.greed-box(type='number', min='0', step='0.01', max='1', value='0.50')
          .bot-data
            label.left-side-label(for='agent11name') Bot 11
            input#agent11name.bot-name(type='text', value='Dr Bunsen')
            input#agent11greed.agentgreed.greed-box(type='number', min='0', step='0.01', max='1', value='0.50')
          .bot-data
            label.left-side-label(for='agent12name') Bot 12
            input#agent12name.bot-name(type='text', value='Waldorf')
            input#agent12greed.agentgreed.greed-box(type='number', min='0', step='0.01', max='1', value='0.50')
      .break
      hr
      .break
      fieldset.floating
        legend Preparatory text
        textarea#preptext(rows='35', cols='50')
          | FISH simulates fishing in an ocean. You and the other fishers are the only fishers in this ocean. All the fishers see the same ocean that you do. At the beginning, the number of fish will be displayed on the screen. However, sometimes there is some uncertainty about the number of fish. In those cases, &apos;mystery fish&apos; will be shown on the screen as well, and the number is displayed as a certain range, not as an absolute number. Once the simulation begins, you and the other fishers may catch as many of these fish as you like. Once  you have taken as many fish as you want, you return to port with your catches, and the first season ends. Then the fish spawn for the next season, if any are left to spawn (if no fish are left, they cannot spawn). For every fish left at the end of one season, two fish will be available to be caught in the next season. However, because the ocean can support only so many fish, the total number of fish will never exceed the original number of fish. Fishing can go on this way for many seasons, but all fishing permanently ceases any time that all the fish are caught.
          | You can make money fishing. You will be paid $5 for every fish you catch. (For now, this is &apos;play&apos; money...but please treat it as if it were real money.)
          | Your job is to consider all these factors, and the other fishers, and make your own decisions about how to fish. Fish however you wish.
          | Please ask if anything is unclear. We want you to fully understand the rules before you start fishing.
          | If you are sure you understand all the above, you are ready to fish. Click on the Go Fishing button on the right when you are ready. Once all the fishers have clicked this button, the first season will begin. (You may have to wait briefly for all the others fishers to click the button.)
      fieldset.floating
        legend End of simulation message
        textarea#endtext(rows='35', cols='50')
          | Seasons come and seasons go, but for now we are done.
      fieldset.floating
        legend Depleted fish stock text
        textarea#depletedtext(rows='35', cols='50')
          | All the fish are now gone.
      .break
      hr
      .break
      button#create(type='button') Create this Group
      label.status-message
